<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddressesCaption" xml:space="preserve">
    <value>Addresses</value>
  </data>
  <data name="AddressesTooltip" xml:space="preserve">
    <value>All addresses (Format: "Name, N, e, d")</value>
  </data>
  <data name="BadSignatureCaption" xml:space="preserve">
    <value>Bad signature</value>
  </data>
  <data name="BadSignatureInCaption" xml:space="preserve">
    <value>Bad Signature in: </value>
  </data>
  <data name="BalanceTableCaption" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="BlockCaption" xml:space="preserve">
    <value>Block</value>
  </data>
  <data name="CrypTool.Plugins.BlockchainCaption" xml:space="preserve">
    <value>Blockchain</value>
  </data>
  <data name="BlockchainTooltip" xml:space="preserve">
    <value>Simulation of blockchain mining process.</value>
  </data>
  <data name="BlockTooltip" xml:space="preserve">
    <value>Hashed Block data</value>
  </data>
  <data name="ChainValidCaption" xml:space="preserve">
    <value>Is chain valid? </value>
  </data>
  <data name="CoinCaption" xml:space="preserve">
    <value> Coin</value>
  </data>
  <data name="CoinsCaption" xml:space="preserve">
    <value>Coins</value>
  </data>
  <data name="ErrorTableCaption" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ExceptionCaption" xml:space="preserve">
    <value>Exception occured: {0}</value>
  </data>
  <data name="FailedCaption" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="FailedTransactionCaption" xml:space="preserve">
    <value>Failed transactions: </value>
  </data>
  <data name="FromCaption" xml:space="preserve">
    <value>From: </value>
  </data>
  <data name="FromTableCaption" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="HashCaption" xml:space="preserve">
    <value>Hash: </value>
  </data>
  <data name="HashValueTableCaption" xml:space="preserve">
    <value>Hash</value>
  </data>
  <data name="InsufficientBalanceCaption" xml:space="preserve">
    <value>Insufficient balance</value>
  </data>
  <data name="InsuffiecientBalanceInCaption" xml:space="preserve">
    <value>Insufficient balance in transaction: </value>
  </data>
  <data name="InvalidAddressCaption" xml:space="preserve">
    <value>Invalid address input</value>
  </data>
  <data name="InvalidTransactionCaption" xml:space="preserve">
    <value>Invalid or incomplete transactions (Check format)</value>
  </data>
  <data name="InvalidValueCaption" xml:space="preserve">
    <value>Invalid value</value>
  </data>
  <data name="LineCaption" xml:space="preserve">
    <value>-</value>
  </data>
  <data name="millisCaption" xml:space="preserve">
    <value>milliseconds</value>
  </data>
  <data name="MiningAddressErrorCaption" xml:space="preserve">
    <value>Mining address not an address</value>
  </data>
  <data name="NameTableCaption" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NegativeValueCaption" xml:space="preserve">
    <value>Negative value in transaction</value>
  </data>
  <data name="nextblockCaption" xml:space="preserve">
    <value>Next block</value>
  </data>
  <data name="nextblockTooltip" xml:space="preserve">
    <value>Output for next block</value>
  </data>
  <data name="NoJSONStringCaption" xml:space="preserve">
    <value>Wrong format in previous block (needed to be JSON)</value>
  </data>
  <data name="NonceCaption" xml:space="preserve">
    <value>Nonce:</value>
  </data>
  <data name="NonceTableCaption" xml:space="preserve">
    <value>Nonce</value>
  </data>
  <data name="NoTransactionCaption" xml:space="preserve">
    <value>No transaction</value>
  </data>
  <data name="NoValidMiningAddressCaption" xml:space="preserve">
    <value>Mining address does not exist or is not valid</value>
  </data>
  <data name="PreviousblockCaption" xml:space="preserve">
    <value>Previous block</value>
  </data>
  <data name="PreviousblockhashCaption" xml:space="preserve">
    <value>Previous block hash: </value>
  </data>
  <data name="PreviousblockTooltip" xml:space="preserve">
    <value>Previous block input (Connect to blockchain component)</value>
  </data>
  <data name="PrevTransactionHashCaption" xml:space="preserve">
    <value>Previous transaction hash: </value>
  </data>
  <data name="PrevTransactionTableCaption" xml:space="preserve">
    <value>Previous transaction hash</value>
  </data>
  <data name="SettingsMiningAddressCaption" xml:space="preserve">
    <value>Mining address</value>
  </data>
  <data name="SettingsMiningAddressTooltip" xml:space="preserve">
    <value>Change the mining address</value>
  </data>
  <data name="SignatureCaption" xml:space="preserve">
    <value>Signature: </value>
  </data>
  <data name="SignatureTableCaption" xml:space="preserve">
    <value>Signature</value>
  </data>
  <data name="SignatureVerifiedCaption" xml:space="preserve">
    <value>Signature verified</value>
  </data>
  <data name="StatusTableCaption" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="SuccessfullCaption" xml:space="preserve">
    <value>Successfull</value>
  </data>
  <data name="TimeSpentCaption" xml:space="preserve">
    <value>Time spent: {0} ms</value>
  </data>
  <data name="TimestampCaption" xml:space="preserve">
    <value>Timestamp: </value>
  </data>
  <data name="ToCaption" xml:space="preserve">
    <value>To: </value>
  </data>
  <data name="toCaption1" xml:space="preserve">
    <value> to </value>
  </data>
  <data name="ToTableCaption" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="TransactionCaption" xml:space="preserve">
    <value>Transaction</value>
  </data>
  <data name="TransactionsCaption" xml:space="preserve">
    <value>Transactions: </value>
  </data>
  <data name="TransactionTooltip" xml:space="preserve">
    <value>Transaction data (string separated with ',' with sender address, recipient address, amount, and transaction signature)</value>
  </data>
  <data name="BlockchainCaption" xml:space="preserve">
    <value>Blockchain</value>
  </data>
  <data name="BalanceUINameCaption" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="BlockHashUICaption" xml:space="preserve">
    <value>Block hash:</value>
  </data>
  <data name="BlockHeaderUICaption" xml:space="preserve">
    <value>Block header</value>
  </data>
  <data name="CurrentHashSpeedUICaption" xml:space="preserve">
    <value>Hashes/sec:</value>
  </data>
  <data name="FromAddressUICaption" xml:space="preserve">
    <value>Sender</value>
  </data>
  <data name="HashAlgorithmUICaption" xml:space="preserve">
    <value>Hash algorithm:</value>
  </data>
  <data name="PrevBlockHashUICaption" xml:space="preserve">
    <value>Previous block hash:</value>
  </data>
  <data name="ToAddressUICaption" xml:space="preserve">
    <value>Recipient</value>
  </data>
  <data name="TransactionsUICaption" xml:space="preserve">
    <value>Transactions</value>
  </data>
  <data name="InvalidAddressInTransaction" xml:space="preserve">
    <value>Invalid adress in transaction</value>
  </data>
  <data name="GenTransactionWarning" xml:space="preserve">
    <value>No transactions possible in Genesis Block</value>
  </data>
  <data name="InvalidAddressName" xml:space="preserve">
    <value>Invalid address name</value>
  </data>
  <data name="MiningDifficultyWarning" xml:space="preserve">
    <value>Mining difficulty higher than hash algorithm</value>
  </data>
  <data name="MiningDifficultyCaption" xml:space="preserve">
    <value>Mining difficulty:</value>
  </data>
  <data name="StatisticsCaption" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="BlockIdUICaption" xml:space="preserve">
    <value>Block Id:</value>
  </data>
  <data name="InvalidChain" xml:space="preserve">
    <value>The blockchain is invalid</value>
  </data>
  <data name="ChangeAddress" xml:space="preserve">
    <value>Change the mining address</value>
  </data>
  <data name="ChangeHashAlgo" xml:space="preserve">
    <value>Change the hash algorithm</value>
  </data>
  <data name="ChangeMiningDifficulty" xml:space="preserve">
    <value>Change mining difficulty</value>
  </data>
  <data name="ChangeReward" xml:space="preserve">
    <value>Change the mining reward</value>
  </data>
  <data name="ChangeWidth" xml:space="preserve">
    <value>Change the hash algorithm width (number of used bytes)</value>
  </data>
  <data name="GenBlockPrevHashCaption" xml:space="preserve">
    <value>Genesis block previous hash has to be 0</value>
  </data>
  <data name="GenBlockPrevIDCaption" xml:space="preserve">
    <value>Genesis block previous block id has to be 0</value>
  </data>
  <data name="HashAlgo" xml:space="preserve">
    <value>Hash algorithm</value>
  </data>
  <data name="HashWidth" xml:space="preserve">
    <value>Hash algorithm width</value>
  </data>
  <data name="HashWidthErrorCaption" xml:space="preserve">
    <value>The hash algorithm width is invalid. Use 1 instead</value>
  </data>
  <data name="InvalidBlockHashCaption" xml:space="preserve">
    <value>Block hash is invalid</value>
  </data>
  <data name="LowZeroesCaption" xml:space="preserve">
    <value>Number of zeros in block hash is too low</value>
  </data>
  <data name="MiningAddress" xml:space="preserve">
    <value>Mining address</value>
  </data>
  <data name="MiningDifficulty" xml:space="preserve">
    <value>Mining difficulty</value>
  </data>
  <data name="MiningReward" xml:space="preserve">
    <value>Mining reward (in coins)</value>
  </data>
  <data name="NoErrorCaption" xml:space="preserve">
    <value>No Error</value>
  </data>
  <data name="PreviousBlockHashWrongCaption" xml:space="preserve">
    <value>Previous block hash wrong</value>
  </data>
  <data name="PreviousBlockIDWrongCaption" xml:space="preserve">
    <value>Previous block ID wrong</value>
  </data>
</root>