//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrypTool.Plugins.RAPPOR.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CrypTool.Plugins.RAPPOR.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of hash functions.
        /// </summary>
        internal static string AmountOfHashFunctionCaption {
            get {
                return ResourceManager.GetString("AmountOfHashFunctionCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the amount of hash functions which are being used for the creation of the Bloom filter. The amount of hash functions is also relevant for the differential privacy levels of the RAPPOR mechanism.
        /// </summary>
        internal static string AmountOfHashFunctionToolTip {
            get {
                return ResourceManager.GetString("AmountOfHashFunctionToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of IRR.
        /// </summary>
        internal static string AmountOfInstantaneousRandomizedResponsesCaption {
            get {
                return ResourceManager.GetString("AmountOfInstantaneousRandomizedResponsesCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the amount of instantaneous randomized responses which are being used by the RAPPOR mechanism..
        /// </summary>
        internal static string AmountOfInstantaneousRandomizedResponsesToolTip {
            get {
                return ResourceManager.GetString("AmountOfInstantaneousRandomizedResponsesToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BF.
        /// </summary>
        internal static string BF {
            get {
                return ResourceManager.GetString("BF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bloom filter.
        /// </summary>
        internal static string BloomFilter {
            get {
                return ResourceManager.GetString("BloomFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input {1} sets the cells {2} in step {3} of the algorithm..
        /// </summary>
        internal static string BloomFilterInformation {
            get {
                return ResourceManager.GetString("BloomFilterInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Algorithm step .
        /// </summary>
        internal static string BloomFilterInformation1 {
            get {
                return ResourceManager.GetString("BloomFilterInformation1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to : The .
        /// </summary>
        internal static string BloomFilterInformation2 {
            get {
                return ResourceManager.GetString("BloomFilterInformation2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to input sets the cell (.
        /// </summary>
        internal static string BloomFilterInformation3 {
            get {
                return ResourceManager.GetString("BloomFilterInformation3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to )..
        /// </summary>
        internal static string BloomFilterInformation4 {
            get {
                return ResourceManager.GetString("BloomFilterInformation4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bloom filter size.
        /// </summary>
        internal static string BloomFilterSizeCaption {
            get {
                return ResourceManager.GetString("BloomFilterSizeCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the size of the Boolean array which is being used for the Bloom filter data structure..
        /// </summary>
        internal static string BloomFilterSizeToolTip {
            get {
                return ResourceManager.GetString("BloomFilterSizeToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On this page there is an animation of the insertion process for the Bloom filter data structure. The animation can be controlled via the buttons in the top bar. To start the tool please click the play button in the top area of CT2. The execution of the tool can then be controlled through the animation speed slider and the five buttons in the top area of the Bloom filter tool. To find further instructions on the usage of this tool please consult the RAPPOR online help..
        /// </summary>
        internal static string BloomFilterText {
            get {
                return ResourceManager.GetString("BloomFilterText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data set.
        /// </summary>
        internal static string DataSet {
            get {
                return ResourceManager.GetString("DataSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Differential privacy level.
        /// </summary>
        internal static string DifferentialPrivacyLevel {
            get {
                return ResourceManager.GetString("DifferentialPrivacyLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to f percentage.
        /// </summary>
        internal static string FPercentageCaption {
            get {
                return ResourceManager.GetString("FPercentageCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the value of the f percentage. Please note that the value entered will be divided by 100 for internal calculations..
        /// </summary>
        internal static string FPercentageToolTip {
            get {
                return ResourceManager.GetString("FPercentageToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        internal static string General {
            get {
                return ResourceManager.GetString("General", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to h.
        /// </summary>
        internal static string h {
            get {
                return ResourceManager.GetString("h", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hash functions.
        /// </summary>
        internal static string Hashfunctions {
            get {
                return ResourceManager.GetString("Hashfunctions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Heat map.
        /// </summary>
        internal static string HeatMaps {
            get {
                return ResourceManager.GetString("HeatMaps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This page provides a heat map that visualizes how often a cell of the Boolean array has been set. Every cell of the Boolean array represent a bit in the 0-1 sequence. The color of the legend shows how often the bit was set to 1 in all iterations. The first row shows the distribution of the Bloom filter over all iterations. It is visible that the Bloom filter always sets the same cells in every iterations as these are shown in red where as cells that have not been set are shown in black. The second row shows [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HeatMapViewText {
            get {
                return ResourceManager.GetString("HeatMapViewText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input.
        /// </summary>
        internal static string Input {
            get {
                return ResourceManager.GetString("Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input.
        /// </summary>
        internal static string InputCaption {
            get {
                return ResourceManager.GetString("InputCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input of the RAPPOR mechanism.
        /// </summary>
        internal static string InputToolTip {
            get {
                return ResourceManager.GetString("InputToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IRR.
        /// </summary>
        internal static string IRR {
            get {
                return ResourceManager.GetString("IRR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Iterations.
        /// </summary>
        internal static string IterationsCaption {
            get {
                return ResourceManager.GetString("IterationsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the amount of iterations which is used for the creation of the heat map..
        /// </summary>
        internal static string IterationToolTip {
            get {
                return ResourceManager.GetString("IterationToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string k {
            get {
                return ResourceManager.GetString("k", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key.
        /// </summary>
        internal static string Key {
            get {
                return ResourceManager.GetString("Key", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Next step.
        /// </summary>
        internal static string NextStep {
            get {
                return ResourceManager.GetString("NextStep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to st .
        /// </summary>
        internal static string ordinalOne {
            get {
                return ResourceManager.GetString("ordinalOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to th .
        /// </summary>
        internal static string ordinalRest {
            get {
                return ResourceManager.GetString("ordinalRest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to rd .
        /// </summary>
        internal static string ordinalThree {
            get {
                return ResourceManager.GetString("ordinalThree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nd .
        /// </summary>
        internal static string ordinalTwo {
            get {
                return ResourceManager.GetString("ordinalTwo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output.
        /// </summary>
        internal static string OutputCaption {
            get {
                return ResourceManager.GetString("OutputCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The output of the RAPPOR mechanism.
        /// </summary>
        internal static string OutputToolTip {
            get {
                return ResourceManager.GetString("OutputToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overview.
        /// </summary>
        internal static string Overview {
            get {
                return ResourceManager.GetString("Overview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This page provides an overview of the Boolean arrays created by the RAPPOR mechanism. The first row shows the original Boolean array of the Bloom filter. The second row shows the Boolean array after it has been processed by the PRR. Every following row shows the altered Boolean array after being processed by an IRR. In the graphic, the red line stands for a boolean value in the array that is set to &quot;true&quot;. The black line stands for a boolean value in the array that is set to &quot;false&quot;..
        /// </summary>
        internal static string OverviewViewText {
            get {
                return ResourceManager.GetString("OverviewViewText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pause.
        /// </summary>
        internal static string PauseAnimation {
            get {
                return ResourceManager.GetString("PauseAnimation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to p percentage.
        /// </summary>
        internal static string PPercentageCaption {
            get {
                return ResourceManager.GetString("PPercentageCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the value of the p percentage. Please note that the value entered will be divided by 100 for internal calculations..
        /// </summary>
        internal static string PPercentageToolTip {
            get {
                return ResourceManager.GetString("PPercentageToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous step.
        /// </summary>
        internal static string PreviousStep {
            get {
                return ResourceManager.GetString("PreviousStep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PRR.
        /// </summary>
        internal static string PRR {
            get {
                return ResourceManager.GetString("PRR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The likelihood of the i cell of
        ///S being set, given that the
        ///underlying cell of i was not set:.
        /// </summary>
        internal static string pStarText {
            get {
                return ResourceManager.GetString("pStarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to q percentage.
        /// </summary>
        internal static string QPercentageCaption {
            get {
                return ResourceManager.GetString("QPercentageCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the value of the q percentage. Please note that the value entered will be divided by 100 for internal calculations..
        /// </summary>
        internal static string QPercentageToolTip {
            get {
                return ResourceManager.GetString("QPercentageToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The likelihood of the i cell of
        ///S being set, given that the
        ///underlying cell of i was set:.
        /// </summary>
        internal static string qStarText {
            get {
                return ResourceManager.GetString("qStarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomized response.
        /// </summary>
        internal static string RandomizedResponse {
            get {
                return ResourceManager.GetString("RandomizedResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This page illustrates how the privacy level epsilon (= privacy budget) guaranteed by RAPPOR is calculated using the parameters h, f, q, and p. Epsilon equal to infinity is generated by RAPPOR after PRR is enabled and is the worst case. Epsilon equal to one is generated by RAPPOR after IRR is activated, and represents privacy guaranteed in the general case. The lower the epsilon value, the more privacy is guaranteed..
        /// </summary>
        internal static string RandomizedResponseText {
            get {
                return ResourceManager.GetString("RandomizedResponseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RAPPOR.
        /// </summary>
        internal static string RAPPOR {
            get {
                return ResourceManager.GetString("RAPPOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RAPPOR.
        /// </summary>
        internal static string RAPPORCaption {
            get {
                return ResourceManager.GetString("RAPPORCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Randomized Aggregatable Privacy-Preserving Ordinal Response.
        /// </summary>
        internal static string RAPPORElaboration {
            get {
                return ResourceManager.GetString("RAPPORElaboration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string RAPPORElaborationGerman {
            get {
                return ResourceManager.GetString("RAPPORElaborationGerman", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implements the RAPPOR mechanism. It allows for anonymously data collection with tunable privacy gurantees. The RAPPOR mechanism was first published in the paper &quot;RAPPOR: Randomized Aggregatable Privacy-Preserving Ordinal Response&quot; by Úlfar Erlingsson, Vasyl Pihur and Aleksandra Korolova in 2014..
        /// </summary>
        internal static string RAPPORToolTip {
            get {
                return ResourceManager.GetString("RAPPORToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset.
        /// </summary>
        internal static string ResetAnimation {
            get {
                return ResourceManager.GetString("ResetAnimation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resume.
        /// </summary>
        internal static string ResumeAnimation {
            get {
                return ResourceManager.GetString("ResumeAnimation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To start the RAPPOR component press the &quot;Play&quot; button on the toolbar above the CT2 workspace. You can navigate through the component using the five tabs above. The component settings can be accessed in three different ways: (1) by clicking on the gear icon in the upper left corner of the component; or (2) by clicking on the gear icon in the upper right corner of the workspace when the component is selected or (3) simply by pressing the key combination Ctrl + i. You can find more information in the online he [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ShortTutorial {
            get {
                return ResourceManager.GetString("ShortTutorial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start.
        /// </summary>
        internal static string Start {
            get {
                return ResourceManager.GetString("Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start.
        /// </summary>
        internal static string StartAnimation {
            get {
                return ResourceManager.GetString("StartAnimation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Animation speed.
        /// </summary>
        internal static string timerInput {
            get {
                return ResourceManager.GetString("timerInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables:.
        /// </summary>
        internal static string variablevalues {
            get {
                return ResourceManager.GetString("variablevalues", resourceCulture);
            }
        }
    }
}
