<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing"
  mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework
  object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0,
      Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0,
      Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Alphabet" xml:space="preserve">
    <value>Alphabet</value>
  </data>
  <data name="AlphabetCaption" xml:space="preserve">
    <value>Alphabet </value>
  </data>
  <data name="AlphabetTooltip" xml:space="preserve">
    <value>Alphabet - Denfiniert die erlaubten Buchstaben</value>
  </data>
  <data name="AttackTypeCaption" xml:space="preserve">
    <value>Typ der Attacke</value>
  </data>
  <data name="AttackTypeTooltip" xml:space="preserve">
    <value>Wähle zwischen Known-Plaintext und Ciphertext-Only Attacke.</value>
  </data>
  <data name="CCaption" xml:space="preserve">
    <value>Eingabe Geheimtext</value>
  </data>
  <data name="Cipher" xml:space="preserve">
    <value>Geheimtext</value>
  </data>
  <data name="CTooltip" xml:space="preserve">
    <value>Geheimtext Eingabe</value>
  </data>
  <data name="DictCaption" xml:space="preserve">
    <value>Wörterbuch</value>
  </data>
  <data name="DictTooltip" xml:space="preserve">
    <value>Wörterbuch für die Generierung des klartexts</value>
  </data>
  <data name="ErrorMessage" xml:space="preserve">
    <value>Fehler: {0}</value>
  </data>
  <data name="HillCipherAttackCaption" xml:space="preserve">
    <value>Kown-Plaintext/Ciphertext-Only Attacke für die Hill-Chiffre</value>
  </data>
  <data name="HillCipherAttackTooltip" xml:space="preserve">
    <value>Implementierung der Kown-Plaintext/Ciphertext-Only Attacke für Hill Cipher</value>
  </data>
  <data name="IncorrectKey" xml:space="preserve">
    <value>Der berechnete schlüssel is nicht korrekt.</value>
  </data>
  <data name="InputContainsIllegalCharacter" xml:space="preserve">
    <value>Die eingabe enthält einen nicht erlaubten Buchstaben.</value>
  </data>
  <data name="InvalidException" xml:space="preserve">
    <value>Die Matrix des Textes ist nicht korrekt.</value>
  </data>
  <data name="InversCalcTypeCaption" xml:space="preserve">
    <value>Berechnungsmethode</value>
  </data>
  <data name="InverseCalcTypeTooltip" xml:space="preserve">
    <value>Wähle zwischen der Berechnung der inversen mittels der adjungierten Matrix oder mittels Eigenvektoren und Eigenwerten.</value>
  </data>
  <data name="KCaption" xml:space="preserve">
    <value>Schlüssel</value>
  </data>
  <data name="KDimCaption" xml:space="preserve">
    <value>Dimensions des Schlüssels</value>
  </data>
  <data name="KDimTooltip" xml:space="preserve">
    <value>Dimension der Schlüsselmatrix</value>
  </data>
  <data name="Key" xml:space="preserve">
    <value>Schlüssel</value>
  </data>
  <data name="Keydimension" xml:space="preserve">
    <value>Dimension des Schlüssels</value>
  </data>
  <data name="KeyValue" xml:space="preserve">
    <value>Schlüssel: {0}</value>
  </data>
  <data name="KMatCaption" xml:space="preserve">
    <value>Schlüsselmatrix</value>
  </data>
  <data name="KMatTooltip" xml:space="preserve">
    <value>Schlüsselmatrix mit gsnzrn Zahlen</value>
  </data>
  <data name="KTooltip" xml:space="preserve">
    <value>Ausgabe des Schlüssels als Text</value>
  </data>
  <data name="LanguageCaption" xml:space="preserve">
    <value>Sprache</value>
  </data>
  <data name="LanguageTooltip" xml:space="preserve">
    <value>Wähle zwischen Deutsch und Englisch für die Wörterbucheinträge</value>
  </data>
  <data name="ModulusCaption" xml:space="preserve">
    <value>Modulus</value>
  </data>
  <data name="ModulusTooltip" xml:space="preserve">
    <value>Parameter m - Länge des Alphabets</value>
  </data>
  <data name="MultiplicationException" xml:space="preserve">
    <value>Exception: Die Anzahl der Spalten der ersten Matrix muss gleich der Anzahl der Zeilen der zweiten Matrix sein.</value>
  </data>
  <data name="NoDictionary" xml:space="preserve">
    <value>Es ist kein Dictionary verfügbar.</value>
  </data>
  <data name="NoIdentityMatrix" xml:space="preserve">
    <value>Es liegt keine Identitätsmatrix vor.</value>
  </data>
  <data name="NoKeyFound" xml:space="preserve">
    <value>Der Schlüssel konnte nicht berechnet werden.</value>
  </data>
  <data name="NoSquareMatrix" xml:space="preserve">
    <value>Exception: Es liegt keine quadratische Matrix vor.</value>
  </data>
  <data name="NotEnoughData" xml:space="preserve">
    <value>Es liegen nicht genügend Werte für die Berechnung für die Dimension {0} vor.</value>
  </data>
  <data name="NotInvertable" xml:space="preserve">
    <value>Die matrix {0} ist nicht invertierbar.</value>
  </data>
  <data name="NoValidKeyForDim" xml:space="preserve">
    <value>Es gibt keinen gültigen schlüssel für die dimension {0}.</value>
  </data>
  <data name="PCaption" xml:space="preserve">
    <value>Eingabe des Klartexts</value>
  </data>
  <data name="Plaintext" xml:space="preserve">
    <value>Klartext</value>
  </data>
  <data name="PTooltip" xml:space="preserve">
    <value>Klartext Eingabe</value>
  </data>
  <data name="StartKeyDimensionCaption" xml:space="preserve">
    <value>Startdimension für den Schlüssel</value>
  </data>
  <data name="StartKeyDimensionTooltip" xml:space="preserve">
    <value>Die Berechnung des Schlüssels beginnt bei dieser Dimension +1</value>
  </data>
</root>