<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaconCipher" xml:space="preserve">
    <value>Bacon-Chiffre </value>
  </data>
  <data name="FirstSet" xml:space="preserve">
    <value>ABCDEFGHIJKLM</value>
  </data>
  <data name="SecondSet" xml:space="preserve">
    <value>NOPQRSTUVWXYZ</value>
  </data>
  <data name="Alphabet" xml:space="preserve">
    <value>Alphabet</value>
  </data>
  <data name="AlphabetTooltip" xml:space="preserve">
    <value>Alphabet, das von der Bacon-Chiffre verwendet wird.</value>
  </data>
  <data name="BaconTooltip" xml:space="preserve">
    <value>Ein Steganographieverfahren von Francis Bacon.</value>
  </data>
  <data name="CharCouldNotBeDecoded" xml:space="preserve">
    <value>Konnte Zeichen "{0}" nicht dekodieren.</value>
  </data>
  <data name="CodeNotMappable" xml:space="preserve">
    <value>Konnte den Chiffriertext nicht vollständig dekodieren, da '{tempCode}' nicht Teil des Mappings ist.</value>
  </data>
  <data name="CharAlreadyMapped" xml:space="preserve">
    <value>Das Alphabet enthält doppelte Zeichen.</value>
  </data>
  <data name="OutputModeCaption" xml:space="preserve">
    <value>Ausgabemodus</value>
  </data>
  <data name="DynamicCodeLengthCaption" xml:space="preserve">
    <value>Dynamische Codewortlänge</value>
  </data>
  <data name="DynamicCodeLengthToolTip" xml:space="preserve">
    <value>Wenn die dynamische Codierung aktiviert wird, werden nur so viele Bits für die Codierung verwendet, wie für die Größe des Alphabets nötig ist. Ansonsten wird eine feste Größe von 5 Bits für die Codierung verwendet.</value>
  </data>
  <data name="IgnoringChar" xml:space="preserve">
    <value>Das Zeichen "{0}" wird ignoriert, da es nicht Teil des Alphabets ist.</value>
  </data>
  <data name="OutputModeToolTip" xml:space="preserve">
    <value>Gibt an, wie der generierte Code ausgegeben werden soll.</value>
  </data>
  <data name="InputTextCaption" xml:space="preserve">
    <value>Texteingabe</value>
  </data>
  <data name="InputTextTooltip" xml:space="preserve">
    <value>Text, der mit der Bacon Cipher verarbeitet werden soll.</value>
  </data>
  <data name="OutputTextCaption" xml:space="preserve">
    <value>Textausgabe</value>
  </data>
  <data name="OutputTextTooltip" xml:space="preserve">
    <value>Text, nachdem er mit der Bacon cipher verarbeitet wurde</value>
  </data>
  <data name="ModeTooltip" xml:space="preserve">
    <value>Bestimmt, ob die Komponente zum Ver- oder Entschlüsseln verwendet wird.</value>
  </data>
  <data name="Mode" xml:space="preserve">
    <value>Modus</value>
  </data>
  <data name="ModeEncrypt" xml:space="preserve">
    <value>Verschlüsseln</value>
  </data>
  <data name="ModeDecrypt" xml:space="preserve">
    <value>Entschlüsseln</value>
  </data>
  <data name="InputAlphabetCaption" xml:space="preserve">
    <value>Externes Alphabet</value>
  </data>
  <data name="InputAlphabetTooltip" xml:space="preserve">
    <value>Externer Eingang für das Alphabet, das von der Bacon-Chiffre verwendet wird.</value>
  </data>
  <data name="DefaultAlphabet" xml:space="preserve">
    <value>abcdefghijklmnopqrstuvwxyz</value>
  </data>
  <data name="OutputModeBinary" xml:space="preserve">
    <value>Binär</value>
  </data>
  <data name="OutputModeRandomChar" xml:space="preserve">
    <value>Zufällige Zeichen</value>
  </data>
  <data name="AlphabetTooLong" xml:space="preserve">
    <value>Das angegebene Alphabet ist zu lang. Bitte aktivieren Sie die dynamische Länge oder geben Sie ein Alphabet mit weniger als 32 Zeichen an.</value>
  </data>
  <data name="CodeLengthCaption" xml:space="preserve">
    <value>Codewortlänge</value>
  </data>
  <data name="CodeLengthToolTip" xml:space="preserve">
    <value>Bestimmt die statische Länge des Codeworts.</value>
  </data>
  <data name="CodeLength" xml:space="preserve">
    <value>Länge</value>
  </data>
  <data name="InputCipherCharsCaption" xml:space="preserve">
    <value>Schlüssel</value>
  </data>
  <data name="InputCipherCharsTooltip" xml:space="preserve">
    <value>Der Schlüssel der für Ver- und Entschlüsselung genutzt wird.</value>
  </data>
  <data name="OutputModeExternalInput" xml:space="preserve">
    <value>Externes Geheimtextalphabet</value>
  </data>
  <data name="ErrorSplitCipherAlphabet" xml:space="preserve">
    <value>Konnte die Eingabe des Chiffretext-Alphabets nicht verarbeiten. Bitte verwenden Sie ein Trennzeichen wie z. B.: "{0}". Ausführung wird angehalten!</value>
  </data>
</root>