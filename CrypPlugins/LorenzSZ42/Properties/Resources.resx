<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionCaption" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>Select the component's action</value>
  </data>
  <data name="BaudotNotationGroup" xml:space="preserve">
    <value>Baudot notation</value>
  </data>
  <data name="British" xml:space="preserve">
    <value>British notation</value>
  </data>
  <data name="CannotConvertToBritishNotation" xml:space="preserve">
    <value>Cannot convert to British notation: Invalid binary code (no baudot code element) {0} ('{1}') at position {2}</value>
  </data>
  <data name="CannotConvertToRawPlaintext" xml:space="preserve">
    <value>Cannot convert to raw plaintext: Invalid binary code (no baudot code element) {0} ('{1}') at position {2}</value>
  </data>
  <data name="CannotConvertToReadableNotation" xml:space="preserve">
    <value>Cannot convert to readable notation: Invalid binary code (no baudot code element) {0} ('{1}') at position {2}</value>
  </data>
  <data name="CannotSelectPsiRuleBasedOnDotsOfMu2" xml:space="preserve">
    <value>Cannot select psi rule based on dots of Mu2</value>
  </data>
  <data name="CHI2_1BACK" xml:space="preserve">
    <value>Chi2 (1 back)</value>
  </data>
  <data name="ChiWeelPinsNotSetAccordingToRules" xml:space="preserve">
    <value>Chi wheel pins not set according to rules</value>
  </data>
  <data name="ChiWeelPinsSetAccordingToRules" xml:space="preserve">
    <value>Chi wheel pins set according to rules</value>
  </data>
  <data name="Decrypt" xml:space="preserve">
    <value>Decrypt</value>
  </data>
  <data name="Encrypt" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="EnteredKeyDoesNotFulfillAllRules" xml:space="preserve">
    <value>Entered key does not fulfill all rules:</value>
  </data>
  <data name="ErrorWhileMachinePerforms" xml:space="preserve">
    <value>Error while machine performs action '{0}': {1}</value>
  </data>
  <data name="GenerateKey" xml:space="preserve">
    <value>Generate key</value>
  </data>
  <data name="InputBaudotNotationAction" xml:space="preserve">
    <value>Input baudot notation</value>
  </data>
  <data name="InputBaudotNotationTooltip" xml:space="preserve">
    <value>Select the input notation of the used Baudot code</value>
  </data>
  <data name="InputTextCaption" xml:space="preserve">
    <value>Text input</value>
  </data>
  <data name="InputTextTooltip" xml:space="preserve">
    <value>Input a string to be processed by the cipher</value>
  </data>
  <data name="InvalidKeyDefinition1" xml:space="preserve">
    <value>Invalid key definition. Expected 13 lines but only got {0}</value>
  </data>
  <data name="InvalidKeyDefinition2" xml:space="preserve">
    <value>Invalid key definition. Expected 3 start position definitions. But got {0}</value>
  </data>
  <data name="InvalidKeyDefinition3" xml:space="preserve">
    <value>Invalid key definition. Error in line {0}: Wheel has {1} pins but got {2}</value>
  </data>
  <data name="InvalidKeyDefinition4" xml:space="preserve">
    <value>Invalid key definition. Found invalid pin symbol '{0}' in line {1}</value>
  </data>
  <data name="InvalidKeyGiven" xml:space="preserve">
    <value>Invalid key given: {0}</value>
  </data>
  <data name="InvalidKeyStartPosition" xml:space="preserve">
    <value>Invalid key start position definition. '{0}' has {1} pins but got start position {2} (positions start with 0)</value>
  </data>
  <data name="InvalidNumberInDeltaCrossesInWheel" xml:space="preserve">
    <value>Invalid number in delta crosses in wheel '{0}': {1}</value>
  </data>
  <data name="InvalidNumberOfConsecutiveCrossesInWheel" xml:space="preserve">
    <value>Invalid number of consecutive crosses in wheel '{0}': {1}</value>
  </data>
  <data name="InvalidNumberOfConsecutiveDotsInWheel" xml:space="preserve">
    <value>Invalid number of consecutive dots in wheel '{0}': {1}</value>
  </data>
  <data name="InvalidNumberOfCrossesInWheel" xml:space="preserve">
    <value>Invalid number of crosses in wheel '{0}': {1}</value>
  </data>
  <data name="InvalidNumberOfDotsInMu2" xml:space="preserve">
    <value>Invalid number of dots in Mu2: {0}</value>
  </data>
  <data name="InvalidNumberOfDotsInWheel" xml:space="preserve">
    <value>Invalid number of dots in wheel '{0}': {1}</value>
  </data>
  <data name="InvalidTextInBritishNotation" xml:space="preserve">
    <value>Invalid text in British notation: unknown symbol '{0}' at position {1}</value>
  </data>
  <data name="InvalidTextInReadableNotation" xml:space="preserve">
    <value>Invalid text in readable notation: unknown symbol '{0}' (figureShift='{1}') at position {2}</value>
  </data>
  <data name="KeyInputCaption" xml:space="preserve">
    <value>Key input</value>
  </data>
  <data name="KeyInputTooltip" xml:space="preserve">
    <value>Input a Lorenz SZ42 key</value>
  </data>
  <data name="KeyOutputTooltip" xml:space="preserve">
    <value>Outputs the used or generated Lorenz SZ42 key</value>
  </data>
  <data name="KeyOututCaption" xml:space="preserve">
    <value>Key output</value>
  </data>
  <data name="LimitationCaption" xml:space="preserve">
    <value>Motor limitation</value>
  </data>
  <data name="LimitationTooltip" xml:space="preserve">
    <value>Select a limitation for the motor</value>
  </data>
  <data name="Mu1WeelPinsNotSetAccordingToRules" xml:space="preserve">
    <value>Mu1 wheel pins not set according to rules</value>
  </data>
  <data name="Mu1WeelPinsSetAccordingToRules" xml:space="preserve">
    <value>Mu1 wheel pins set according to rules</value>
  </data>
  <data name="Mu2WeelPinsNotSetAccordingToRules2" xml:space="preserve">
    <value>Mu2 wheel pins not set according to rules</value>
  </data>
  <data name="Mu2WeelPinsSetAccordingToRules" xml:space="preserve">
    <value>Mu2 wheel pins set according to rules</value>
  </data>
  <data name="NoKeyProvided" xml:space="preserve">
    <value>No key provided</value>
  </data>
  <data name="NO_LIMITATION" xml:space="preserve">
    <value>No limitation</value>
  </data>
  <data name="OutputBaudotNotationAction" xml:space="preserve">
    <value>Output baudot notation</value>
  </data>
  <data name="OutputBaudotNotationTooltip" xml:space="preserve">
    <value>Select the output notation of the used Baudot code</value>
  </data>
  <data name="OutputTextCaption" xml:space="preserve">
    <value>Text output</value>
  </data>
  <data name="OutputTextTooltip" xml:space="preserve">
    <value>The result output text of the machine</value>
  </data>
  <data name="P5_2BACK" xml:space="preserve">
    <value>Plaintext bit 5 (2 back)</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Lorenz SZ42</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Component implementing the Lorenz SZ42 machine</value>
  </data>
  <data name="PSI1_1BACK" xml:space="preserve">
    <value>Psi1 (1 back)</value>
  </data>
  <data name="PSI1_1BACK_P5_2BACK" xml:space="preserve">
    <value>Psi1 (1 back) and plaintext bit 5 (2 back)</value>
  </data>
  <data name="PsiWeelPinsNotSetAccordingToRules" xml:space="preserve">
    <value>Psi wheel pins not set according to rules</value>
  </data>
  <data name="PsiWeelPinsSetAccordingToRules" xml:space="preserve">
    <value>Psi wheel pins set according to rules</value>
  </data>
  <data name="Raw" xml:space="preserve">
    <value>Raw text</value>
  </data>
  <data name="Readable" xml:space="preserve">
    <value>Readable notation</value>
  </data>
</root>