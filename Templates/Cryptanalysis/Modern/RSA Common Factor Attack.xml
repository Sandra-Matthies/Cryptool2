<?xml version="1.0" encoding="utf-8"?>
<sample>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--File name: RSA Common Factor Attack.xml-->
  <!--Last edited: 2022.02.08-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--Language 'en' starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <title lang="en">RSA Common Factor Attack</title>
  <summary lang="en">Attack on the <i>RSA</i> algorithm if using modules N with common factors (shared primes)</summary>
  <description lang="en">Attack on the <i>RSA</i> algorithm if using modules N with common factors (shared primes)</description>
  <keywords>RSA, attack, common factor, shared primes</keywords>
  <replacements lang="en">
    <replacement key="$memo$" value="{\b Template to show the common factor attack (aka shared prime)}\line \line Given are 2 modules N1 = P*Q  and  N2 = R*Q,  which share one common prime factor Q.\line You don't know the factors P, Q, and R, but only the two modules (products).\line \line Without factoring N1 or N2, you first find the common factor Q, and then by simple division the two other factors P and R.\line \line In reality, N1 and N2 are much bigger (e.g. 2^2048 or 10^620). Then, it's much much more obvious, that factorization is slow or even impossible, but calculating the according gcd is really fast.\line \line See the CT Book, section 4.11.5.4 about shared primes in RSA modules used in reality.\line" />
  </replacements>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--Language 'de' starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <title lang="de">RSA-Angriff auf gemeinsamen Faktor</title>
  <summary lang="de">Angriff auf den <i>RSA</i>-Algorithmus, der mit gemeinsamen Faktoren verwendet wird</summary>
  <description lang="de">Angriff auf den <i> RSA</i> Algorithmus, der mit gemeinsamen Primfaktoren verwendet wird</description>
  <keywords lang="de">RSA, Angriff, gemeinsamer Faktor, gemeinsame Primzahl</keywords>
  <replacements lang="de">
    <replacement key="$memo$" value="{\b Angriff auf gemeinsamen Primfaktor (aka Shared Prime)}\line \line Gegeben sind 2 Module N1 = P * Q und N2 = R * Q, die sich einen gemeinsamen Primfaktor Q teilen.\line Sie kennen die Faktoren P, Q und R nicht, sondern nur die beiden Module (Produkte).\line \line Ohne N1 oder N2 zu faktorisieren finden Sie zuerst den gemeinsamen Faktor Q und dann durch einfache Division die beiden anderen Faktoren P und R.\line \line In der Realität sind N1 und N2 viel größer (z. B. 2^2048 oder 10^620). Mit solchen Werten dauert die Faktorisierung sehr lange oder ist sogar unmöglich, aber die Berechnung des entsprechenden ggT (englisch gcd) ist sehr schnell. \line \line Siehe CT-Buch, Abschnitt 4.11.5.4 über gemeinsame Primfaktoren in RSA-Modulen, die in der Realität verwendet wurden." />
  </replacements>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--The general section starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <icon file="RSA.png" />
  <relevantPlugins>
    <plugin name="NumberOperations" />
    <plugin name="PrimesGenerator" />
  </relevantPlugins>
</sample>