<?xml version="1.0" encoding="utf-8"?>
<sample>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--File name: Password_basedKeyDerivationFunctions.xml-->
  <!--Last edited: 2022.12.23-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--Language 'en' starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <title lang="en">Password-Based Key Derivation Functions</title>
  <summary lang="en">Shows how to computes cryptographic keys using PBKDF1, PBKDF2 and PKCS#5</summary>
  <description lang="en">This template shows how to compute a cryptographic key using PBKDF1, PBKDF2 and PKCS#5</description>
  <keywords>SHA, Password, Salt, Storage, key derivation, PBKDF1, PBKDF2, PKCS#5, PKCS5, SHA, Passwort, Salz, Speicherung, Schlüsselableitung, PBKDF1, PBKDF2, PKCS#5, PKCS5</keywords>
  <replacements lang="en">
    <replacement key="$Password$" value="Password" />
    <replacement key="$Salt$" value="Salt" />
    <replacement key="$Key (PBKDF1)$" value="Generated key (PBKDF1)" />
    <replacement key="$Key (PBKDF2)$" value="Generated key (PBKDF2)" />
    <replacement key="$Key (PKCS5)$" value="Generated key (PKCS#5)" />
    <replacement key="$memo$" value="{\b PBKDF1, PBKDF2, and PKCS#5}\line \line This template demonstrates the usage of the Password-based Key Derivation Function (PBKDF) [1] component.\line \line The component implements PBKDF1 and PBKDF2, as defined in RFC2898 (see [2]).\line \line PBKDF1 uses a hash function to generate a cryptographic key based on a password and a salt. The hash function is repeated as defined by the iteration count in the component's settings.\line \line PBKDF2 uses an HMAC (hash-based message authentication code), which is also repeated as defined by the iteration count in the component's settings.\line \line PKCS#5 delivers the same result as PBKDF2. This component has an additional setting to choose different input encodings, e.g. UTF8 and ASCII.\line \line Both &quot;modes&quot; use internally SHA1, SHA256, SHA384, or SHA512 as hash function. Using the component's settings, one can change to the desired one.\line \line The output length can also be defined. PBKDF2 supports arbritary output sizes while PBKDF1 output size is limited by the selected hash function's output size.\line \line [1] PBKDF2 in Wikipedia: https://en.wikipedia.org/wiki/PBKDF2\line [2]  PKCS #5: Password-Based Cryptography Specification Version 2.0, 2000\line       https://datatracker.ietf.org/doc/html/rfc2898\line " />
  </replacements>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--Language 'de' starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <title lang="de">Passwortbasierte Schlüsselableitungsfunktionen</title>
  <summary lang="de">Zeigt, wie man mit PBKDF1, PBKDF2 und PKCS#5 kryptografische Schlüssel berechnet</summary>
  <description lang="de">Diese Vorlage zeigt, wie ein kryptographischer Schlüssel mit PBKDF1, PBKDF2 und PKCS#5 berechnet wird</description>
  <replacements lang="de">
    <replacement key="$Password$" value="Passwort" />
    <replacement key="$Salt$" value="Salt" />
    <replacement key="$Key (PBKDF1)$" value="Generierter Schlüssel (PBKDF1)" />
    <replacement key="$Key (PBKDF2)$" value="Generierter Schlüssel (PBKDF2)" />
    <replacement key="$Key (PKCS5)$" value="Generierter Schlüssel (PKCS#5)" />
    <replacement key="$memo$" value="{\b PBKDF1, PBKDF2 und PKCS#5}\line \line Diese Vorlage demonstriert die Verwendung der Komponente PBKDF (Password-based Key Derivation Function) [1].\line \line Die Komponente implementiert PBKDF1 und PBKDF2, wie in RFC2898 (siehe [2]) definiert.\line \line PBKDF1 verwendet eine Hash-Funktion, um einen kryptografischen Schlüssel zu erzeugen, der auf einem Passwort und einem Salt basiert. Die Hash-Funktion wird so oft wiederholt, wie es die Iterationszahl in den Einstellungen der Komponente vorgibt.\line \line PBKDF2 verwendet einen HMAC (hash-based message authentication code), der ebenfalls entsprechend der Iterationszahl in den Einstellungen der Komponente wiederholt wird.\line \line PKCS#5 liefert das gleiche Ergebnis wie PBKDF2. Diese Komponente verfügt über eine zusätzliche Einstellung zur Auswahl verschiedener Eingabekodierungen, z. B. UTF8 und ASCII.\line \line Beide &quot;Modi&quot; verwenden intern SHA1, SHA256, SHA384, oder SHA512 als Hash-Funktion. Über die Einstellungen der Komponente kann man auf die gewünschte Funktion wechseln.\line \line Die Ausgabelänge kann ebenfalls definiert werden. PBKDF2 unterstützt beliebige Ausgabegrößen, während die PBKDF1-Ausgabegröße durch die Ausgabegröße der gewählten Hashfunktion begrenzt ist.\line \line [1] PBKDF2 in Wikipedia: https://de.wikipedia.org/wiki/PBKDF2\line [2] PKCS #5: Password-Based Cryptography Specification Version 2.0, 2000\line       https://datatracker.ietf.org/doc/html/rfc2898\line" />
  </replacements>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--The general section starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <icon file="Password_basedKeyDerivationFunctions.png" />
  <relevantPlugins>
    <plugin name="PBKDF" />
  </relevantPlugins>
</sample>