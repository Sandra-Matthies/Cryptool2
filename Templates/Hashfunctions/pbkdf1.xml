<?xml version="1.0" encoding="utf-8"?>
<sample>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--File name: pbkdf1.xml-->
  <!--Last edited: 2022.02.08-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--Language 'en' starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <title lang="en">PBKDF-1 (PKCS#5 2.0)</title>
  <summary lang="en">Password-Based Key Derivation Function 1</summary>
  <description lang="en">This template shows how to implement PBKDF-1 in CrypTool 2</description>
  <keywords>Hash, SHA-1, pkcs#5, PBKDF-1, key generation, iterations, RFC 2898</keywords>
  <replacements lang="en">
    <replacement key="$Gate$" value="Gate" />
    <replacement key="$Comparator$" value="Comparator" />
    <replacement key="$String Decoder$" value="String Decoder" />
    <replacement key="$Concatenate$" value="Concatenate" />
    <replacement key="$Password$" value="Password" />
    <replacement key="$Incrementer$" value="Incrementer" />
    <replacement key="$Key$" value="Key" />
    <replacement key="$Progress$" value="Progress" />
    <replacement key="$Stop at$" value="Stop at" />
    <replacement key="$memo$" value="{\b PBKDF1 (Password-based key derivation function 1):}\line This template demonstrates how to compute a key that is derived from a password. The key derivation is done as described in the RFC2898 (PBKDF1) [1].
  \line\line At first, the user-given password is concatenated with the user-given salt:\line {\b T_0 = Salt || Password}, where || means string concatenation.
  \line After that, the T_s are hashed in a loop:\line {\b T_1 = hash(T_0)\line T_2 = hash(T_1)\line ...\line T_i = hash(T_i-1)},
  \line where T_1 is the SHA-1 hash of T_0, T_2 is the SHA-1 hash of T_1, and so on.
  \line The final key is equal to T_i and will appear in the Key component. During the execution, the current progress is visible at the Progress component. Hint: To compute a new key, you have to restart the workspace every time. The intermediate values are also displayed during execution. If you want to see all values, you have to select &quot;Append text input&quot; in the Key component's settings.
  \line\line [1] RFC2898: https://tools.ietf.org/html/rfc2898" />
  </replacements>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--Language 'de' starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <title lang="de">PBKDF-1 (PKCS#5 2.0)</title>
  <summary lang="de">Passwortbasierte Schlüsselgeneration mit PBKDF-1</summary>
  <description lang="de">Diese Vorlage zeigt, wie man mit CT2 PBKDF-1 implementieren kann.</description>
  <keywords lang="de">Hash, SHA-1, pkcs#5, PBKDF-1, Schlüsselerzeugung</keywords>
  <replacements lang="de">
    <replacement key="$Gate$" value="Gatter" />
    <replacement key="$Comparator$" value="Vergleicher" />
    <replacement key="$String Decoder$" value="String-Decodierer" />
    <replacement key="$Concatenate$" value="Konkatenation" />
    <replacement key="$Password$" value="Passwort" />
    <replacement key="$Incrementer$" value="Inkrementierer" />
    <replacement key="$Key$" value="Schlüssel" />
    <replacement key="$Progress$" value="Fortschritt" />
    <replacement key="$Stop at$" value="Stop bei" />
    <replacement key="$memo$" value="{\b PBKDF1 (Password-based key-derivation function 1):}\line Diese Vorlage demonstriert die Berechnung eines Schlüssels, der aus einem Passwort abgeleitet wird. Die Schlüsselableitung erfolgt wie in RFC2898 (PBKDF1) [1] beschrieben.
  \line\line Zuerst wird das vom Benutzer eingebene Passwort mit dem vom Benutzer eingegebenen Salt verkettet: \line {\b T_0 = Salt || Password}, wobei || die Verkettung von Strings bedeutet.
  \line Danach werden die T_s in einer Schleife gehasht:\line {\b T_1 = hash(T_0)\line T_2 = hash(T_1)\line ...\line T_i = hash(T_i-1)},
  \line wobei T_1 der SHA-1-Hash von T_0 ist, T_2 der SHA-1-Hash von T_1, und so weiter.
  \line Der endgültige Schlüssel ist gleich T_i und wird in der Schlüssel-Komponente angezeigt. Während der Ausführung ist der aktuelle Fortschritt in der Komponente &quot;Fortschritt&quot; sichtbar. Hinweis: Um einen neuen Schlüssel zu berechnen, müssen Sie den Arbeitsbereich jedes Mal neu starten. Die Zwischenwerte werden auch während der Ausführung angezeigt. Wenn Sie alle Werte sehen wollen, müssen Sie in den Einstellungen der Schlüssel-Komponente &quot;Eingabetext anfügen&quot; auswählen.
  \line\line [1] RFC2898: https://tools.ietf.org/html/rfc2898" />
  </replacements>
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--The general section starts here:-->
  <!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <icon file="pbkdf1.png" />
  <relevantPlugins>
    <plugin name="SHA" />
  </relevantPlugins>
</sample>